#VRML V2.0 utf8

PROTO ROTATE_TRANSLATION
  [
  eventIn SFVec3f translation_in
  eventIn SFRotation rotation_in
  eventOut SFVec3f translation_out
  ]
{
Script 
  {
  eventIn SFVec3f translation_in IS translation_in
  eventIn SFRotation rotation_in IS rotation_in
  eventOut SFVec3f translation_out IS translation_out
  url "javascript:
         function initialize()
            {
            translation_out[0]=0;
            translation_out[1]=0;
            translation_out[2]=0;
            }
// account vektorproduct c = a x b
         function vectorproduct(c,a,b)
            {
            c[0]=a[1]*b[2]-a[2]*b[1];
            c[1]=a[2]*b[0]-a[0]*b[2];
            c[2]=a[0]*b[1]-a[1]*b[0];
            }
// account scalarproduct a * b
         function scalarproduct(a,b)
            {
            return(a[0]*b[0]+a[1]*b[1]+a[2]*b[2]);
            }
// account quaternion multiplication a b
         function quaternionmult(c,a,b)
            {
            vectorproduct(c,a,b);
            c[0]=c[0]+a[3]*b[0]+b[3]*a[0];
            c[1]=c[1]+a[3]*b[1]+b[3]*a[1];
            c[2]=c[2]+a[3]*b[2]+b[3]*a[2];
            c[3]=a[3]*b[3]-scalarproduct(a,b);
            }             
// make rotation to quaternion with norm 1 
         function norm_quaternion_from_rotation(quad,rot)  
            {
            quad[3]=Math.cos(rot[3]/2.0);
            winkelkorrektur=Math.sin(rot[3]/2.0);
            quad[0]=rot[0]*winkelkorrektur;
            quad[1]=rot[1]*winkelkorrektur;
            quad[2]=rot[2]*winkelkorrektur;
            leng=Math.sqrt(quad[0]*quad[0]+quad[1]*quad[1]+quad[2]*quad[2]+
                           quad[3]*quad[3]);
            if (leng!=0)
               {
               quad[0]=quad[0]/leng;
               quad[1]=quad[1]/leng;
               quad[2]=quad[2]/leng;
               quad[3]=quad[3]/leng;
               }
            else
               {
               quad[0]=0;
               quad[1]=0;
               quad[2]=0;
               quad[3]=0;
               }
            }
         function rotation_in(val)  
            {
            rotation=val;
            }
         function translation_in(val)  
            {
            norm_quaternion_from_rotation(quaternion1,rotation);
            quaternion2[0]=val[0];
            quaternion2[1]=val[1];
            quaternion2[2]=val[2];
            quaternion2[3]=0;
            quaternionmult(quaternion3,quaternion1,quaternion2);
            quaternion1[0]=-quaternion1[0];
            quaternion1[1]=-quaternion1[1];
            quaternion1[2]=-quaternion1[2];
            quaternion1[3]= quaternion1[3];
            quaternionmult(quaternion2,quaternion3,quaternion1);
            translation_out[0]=quaternion2[0];
            translation_out[1]=quaternion2[1];
            translation_out[2]=quaternion2[2];
            }
         "
  field SFRotation   rotation 0 0 1 0
  field SFRotation   quaternion1 0 0 1 0
  field SFRotation   quaternion2 0 0 1 0
  field SFRotation   quaternion3 0 0 1 0
  field SFFloat   leng 1
  field SFFloat   winkelkorrektur 0
  }

}

PROTO moving_box
  [
  eventIn SFVec3f translation_in
  eventOut SFInt32 deleted_out
  exposedField MFNode children 
    [
    ]
  ]
{
DEF HIDE_BOX Transform
  {
  children 
    DEF BOX_SWITCH Switch
      {
      choice 
        DEF BOX_MOVE Transform
          {
          scale 1.500000 1.500000 1.500000
          children 
            [
            DEF BOX_SENSOR TouchSensor
              {
              }
            Shape
              {
              appearance Appearance
                {
                material Material
                  {
                  }
                }
              geometry IndexedFaceSet
                {
                color Color
                  {
                  color 
                    [
                    0.240000 0.210000 0.060000
                    0.240000 0.210000 0.060000
                    0.240000 0.210000 0.060000
                    0.240000 0.210000 0.060000
                    0.240000 0.210000 0.060000
                    0.240000 0.210000 0.060000
                    ]
                  }
                coord Coordinate
                  {
                  point 
                    [
                    -0.500000 -0.500000 -0.500000
                    -0.500000 0.500000 -0.500000
                    0.500000 0.500000 -0.500000
                    0.500000 -0.500000 -0.500000
                    -0.500000 -0.500000 0.400000
                    -0.500000 0.500000 0.400000
                    0.500000 0.500000 0.400000
                    0.500000 -0.500000 0.400000
                    ]
                  }
                colorPerVertex FALSE
                coordIndex 
                  [
                  0 1 2 3 -1 
                  6 7 3 2 -1 
                  7 6 5 4 -1 
                  4 5 1 0 -1 
                  1 5 6 2 -1 
                  4 0 3 7 -1 
                  ]
                creaseAngle 0.500000
                solid FALSE
                }
              }
            Transform
              {
              translation 0 0 2
              children 
                [
                DEF DUMMY_TEXT TouchSensor
                  {
                  }
                Group
                  {
                  children IS children
                  }
                ]
              }
            ]
          }
      }
  }

DEF HIT_CHECK Script 
  {
  eventIn SFVec3f translation_in IS translation_in
  eventIn SFVec3f box_position
  eventOut SFInt32 deleted_out IS deleted_out
  eventOut SFInt32 choice_out
  url "javascript:
      function initialize()
         {
         choice_out=0;
         deleted_out=1;
         }
      function translation_in(val)  
         {
         if (!deleted)
            if (   (val[0]>=box[0]-boxsize/2) && (val[0]<=box[0]+boxsize/2)
                && (val[1]>=box[1]-boxsize/2) && (val[1]<=box[1]+boxsize/2)
                && (val[2]>=box[2]-boxsize/2) && (val[2]<=box[2]+boxsize/2)
               )
               {
               choice_out=1;
               deleted_out=0;
               deleted=1;
               }
            else
               choice_out=0;
         else
            choice_out=1;
         }
         
      function box_position(val)
         {
         box[0]=val[0];
         box[1]=val[1];
         box[2]=val[2];
         }  
      "
  field SFInt32   deleted 0
  field SFVec3f   box 1e4 1e4 1e4
  field SFFloat   boxsize 1.500000
  }

ROUTE HIT_CHECK.choice_out TO BOX_SWITCH.set_whichChoice

DEF MOVE_ON Script 
  {
  eventIn SFVec3f translation_in IS translation_in
  eventOut SFVec3f translation_out
  url "javascript:
      function nextsteps()
         {
         step_translation[0]=(Math.random()-0.5)*0.04;
         step_translation[1]=(Math.random()-0.5)*0.04;
         step_translation[2]=(Math.random()-0.5)*0.04;
         step=Math.floor(Math.random()*200+1);
         }
      function initialize()
         {
         translation_out[0]=Math.random()*8-4;
         translation_out[1]=Math.random()*6-3;
         translation_out[2]=Math.random()*-30-1;
         nextsteps();
         }
      function translation_in(val)  
         {
         step--;
         if (step<=0)
            nextsteps();
         if (   (translation_out[0]+step_translation[0]<4) 
             && (translation_out[0]+step_translation[0]>-4)) 
            translation_out[0]+=step_translation[0];
         if (   (translation_out[1]+step_translation[1]<3) 
             && (translation_out[1]+step_translation[1]>-3)) 
             translation_out[1]+=step_translation[1];
         if (   (translation_out[2]+step_translation[2]<-1) 
             && (translation_out[2]+step_translation[2]>-30)) 
            translation_out[2]+=step_translation[2];
         }
      "
  field SFVec3f   step_translation 0 0 0
  field SFInt32   step 0
  }

ROUTE MOVE_ON.translation_out TO HIT_CHECK.box_position
ROUTE MOVE_ON.translation_out TO BOX_MOVE.set_translation

DEF HIDE_SCRIPT Script 
  {
  eventIn SFBool isover_in
  eventOut SFVec3f hide_out
  url "javascript:
   function isover_in(val)            
      {            
      if (val)
         {
         hide_out[0]=0;
         hide_out[1]=0;
         hide_out[2]=100;
         }
      else
         {
         hide_out[0]=0;
         hide_out[1]=0;
         hide_out[2]=0;
         }
      }    
   "
  }

ROUTE BOX_SENSOR.isOver TO HIDE_SCRIPT.isover_in
ROUTE HIDE_SCRIPT.hide_out TO HIDE_BOX.set_translation

ROUTE HIDE_SCRIPT.hide_out TO HIDE_BOX.set_translation

ROUTE MOVE_ON.translation_out TO HIT_CHECK.box_position
ROUTE HIT_CHECK.choice_out TO BOX_SWITCH.set_whichChoice

ROUTE MOVE_ON.translation_out TO HIT_CHECK.box_position
ROUTE MOVE_ON.translation_out TO BOX_MOVE.set_translation

ROUTE BOX_SENSOR.isOver TO HIDE_SCRIPT.isover_in
ROUTE HIDE_SCRIPT.hide_out TO HIDE_BOX.set_translation

}

# do not read this
# this is a conclusion of files consisting of various inlines and protos,
# but openvrml-people only want to have only one file...
# Better versions are 
# http://www.lug-s.org/dokumentation/software/vrml/vrmldemo/compressed/warbird.wrz
# or
# http://www.lug-s.org/dokumentation/software/vrml/vrmldemo1.26/compressed/warbird.wrz
# The later uses a transparent object directly in front of the user, you 
# better use cosmoplayer for that 8-(
# do not make the background too dark...
Background
  {
  groundColor 0 0 1
  skyColor 0 0 1
  }

Billboard
  {
  children 
    [
    DEF WALL_SENSOR PlaneSensor
      {
      maxPosition 1e4 1e4
      minPosition -1e4 -1e4
      }
    Shape
      {
      appearance Appearance
        {
        material Material
          {
          diffuseColor 0 0 1
          }
        }
      geometry IndexedFaceSet
        {
        coord DEF COORD Coordinate
          {
          point 
            [
            -600 -600 -35
            600 -600 -35
            -600 600 -35
            600 600 -35
            ]
          }
        coordIndex 
          [
          0 1 3 2 -1 
          ]
        texCoordIndex 
          [
          0 1 3 2 -1 
          ]
        }
      }
    ]
  }

DEF WALL_FIRE Script 
  {
  eventIn SFBool isactive_in
  eventOut SFBool fire
  url "javascript:            
      function initialize()            
         {            
         fire=FALSE;
         }            
// release button == fire     
      function isactive_in(val)            
         {            
         if ((!val) && old_isactive) 
            fire=TRUE;
         else 
            fire=FALSE;           
         old_isactive=val;           
         }            
      "
  field SFBool   old_isactive FALSE
  }

ROUTE WALL_SENSOR.isActive TO WALL_FIRE.isactive_in

# we need 2 of this 
DEF ROT_TRANS1 ROTATE_TRANSLATION
  {
